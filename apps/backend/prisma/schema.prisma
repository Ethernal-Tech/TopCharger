// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  UNSET
  HOST
  DRIVER
  ADMIN
}

enum ConnectorType {
  TYPE2
  CCS2
  CHADEMO
  CCS1
  NEMA14_50
  SCHUKO
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  passwordHash  String?
  role          UserRole  @default(UNSET)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  host     HostProfile?
  driver   DriverProfile?
  accounts Account[]
  sessions Session[]
}

model HostProfile {
  userId          String            @id
  user            User              @relation(fields: [userId], references: [id])
  businessName    String
  bankAccountIban String?
  bankAccountName String?
  chargers        Charger[]
  sessions        ChargingSession[]
}

model DriverProfile {
  userId             String            @id
  user               User              @relation(fields: [userId], references: [id])
  fullName           String?
  phone              String?
  solanaPubkey       String?
  preferredConnector ConnectorType?
  vehicles           Vehicle[]
  sessions           ChargingSession[]
}

model Vehicle {
  id        String        @id @default(cuid())
  driverId  String
  Driver    DriverProfile @relation(fields: [driverId], references: [userId])
  model     String?
  connector ConnectorType
  createdAt DateTime      @default(now())
}

enum ChargingStatus {
  PENDING
  ACTIVE
  STOPPED
  SETTLED
  CANCELLED
}

model Charger {
  id          String        @id @default(cuid())
  hostId      String
  host        HostProfile   @relation(fields: [hostId], references: [userId])
  name        String
  latitude    Float
  longitude   Float
  pricePerKwh Float
  connector   ConnectorType
  available   Boolean       @default(true)
  powerKw     Float         @default(22)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions ChargingSession[]

  @@index([hostId])
}

model ChargingSession {
  id        String @id @default(cuid())
  driverId  String
  chargerId String
  hostId    String

  status ChargingStatus @default(PENDING)

  // Snapshots at START for correct billing
  pricePerKwhSnapshot Float
  powerKwSnapshot     Float
  connectorSnapshot   ConnectorType

  // Times & metering
  startedAt DateTime  @default(now())
  stoppedAt DateTime?
  energyKwh Float? // computed in STOP if you donâ€™t have real meter
  costTotal Float? // computed in STOP

  // Future blockchain hooks
  startTxSig String?
  stopTxSig  String?

  driver  DriverProfile @relation(fields: [driverId], references: [userId])
  charger Charger       @relation(fields: [chargerId], references: [id])
  host    HostProfile   @relation(fields: [hostId], references: [userId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([driverId, status])
  @@index([chargerId, status])
  @@index([hostId, status])
}

// Auth.js tables
// It needs these tables for OAuth sessions/accounts.
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
